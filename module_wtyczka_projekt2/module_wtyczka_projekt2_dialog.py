# -*- coding: utf-8 -*-
"""
/***************************************************************************
 wtyczka_projekt2Dialog
                                 A QGIS plugin
 Wtyczka do projektu 2
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-03
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Aleksander Przybysz
        email                : 01179211@pw.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'module_wtyczka_projekt2_dialog_base.ui'))


class wtyczka_projekt2Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(wtyczka_projekt2Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton_dh_calculate.clicked.connect(self.calculate_dh)
        self.pushButton_area_calculate.clicked.connect(self.calculate_area)
        
    def calculate_dh(self):
        current_layer = self.mMapLayerComboBox.currentLayer()
        selected_features = current_layer.selectedFeatures()
        h_1 = float(selected_features[0]['wysokosc'])
        h_2 = float(selected_features[1]['wysokosc'])
        d_h = h_2 - h_1
        self.label_dh_result.setText(f'{d_h} m')
        
    def calculate_area(self):
        current_layer_area = self.mMapLayerComboBox_area.currentLayer()
        selected_features_area = current_layer_area.selectedFeatures()
        
        x = 
        y = 
        
        n = len(x)
        if n != len(y):
            raise ValueError("Listy x i y muszą mieć taką samą długość.")
        
        area = 0.0
        for i in range(n):
            area += x[i] * (y[(i + 1) % n] - y[(i - 1) % n])
            
        return 0.5 * abs(area)
       
        
        self.label_area_result.setText(f'{area} m^2')